import os
import requests
import json
import base64
import cv2
import numpy as np
from typing import Optional, Dict, Any
from dotenv import load_dotenv
from PIL import Image, ImageEnhance, ImageFilter
import io

load_dotenv()

class AIService:
    def __init__(self):
        self.gemini_api_key = os.getenv("GEMINI_API_KEY")
        self.hf_api_key = os.getenv("HUGGINGFACE_API_KEY")
        self.cohere_api_key = os.getenv("COHERE_API_KEY")
        self.anthropic_api_key = os.getenv("ANTHROPIC_API_KEY")
        
        # APIs dispon√≠veis
        self.available_apis = []
        if self.gemini_api_key:
            self.available_apis.append("gemini")
        if self.hf_api_key:
            self.available_apis.append("huggingface")
        if self.cohere_api_key:
            self.available_apis.append("cohere")
        if self.anthropic_api_key:
            self.available_apis.append("anthropic")
    
    def get_available_apis(self) -> list:
        """Retorna lista de APIs dispon√≠veis"""
        return self.available_apis
        
    def preprocess_image(self, image_path: str) -> str:
        """
        Pr√©-processa imagem para melhor an√°lise de IA com foco em mamografia
        
        Args:
            image_path: Caminho da imagem original
            
        Returns:
            Caminho da imagem processada
        """
        try:
            # Carregar imagem
            with Image.open(image_path) as img:
                print(f"üñºÔ∏è  Processando imagem: {img.size}, modo: {img.mode}")
                
                # 1. CONVERTER PARA ESCALA DE CINZA (preto e branco)
                if img.mode != 'L':
                    img = img.convert('L')
                    print("üì∑ Convertido para escala de cinza")
                
                # 2. OTIMIZAR CONTRASTE para mamografia
                enhancer = ImageEnhance.Contrast(img)
                img = enhancer.enhance(1.3)  # Aumentado de 1.2 para 1.3
                print("üé® Contraste otimizado para mamografia")
                
                # 3. APLICAR NITIDEZ AVAN√áADA
                # Filtro UnsharpMask mais agressivo para melhorar detalhes
                img = img.filter(ImageFilter.UnsharpMask(radius=1.5, percent=200, threshold=2))
                print("üîç Nitidez melhorada para an√°lise m√©dica")
                
                # 4. AJUSTAR BRILHO para melhor visualiza√ß√£o
                enhancer = ImageEnhance.Brightness(img)
                img = enhancer.enhance(1.05)  # Reduzido para 1.05 para n√£o saturar
                print("üí° Brilho ajustado para an√°lise m√©dica")
                
                # 5. APLICAR FILTRO DE REALCE DE BORDAS
                # Melhorar defini√ß√£o de estruturas
                img = img.filter(ImageFilter.EDGE_ENHANCE_MORE)
                print("üìê Bordas real√ßadas para melhor defini√ß√£o")
                
                # 6. REDIMENSIONAR para tamanho otimizado
                img.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
                print(f"üìè Redimensionado para: {img.size}")
                
                # 7. SALVAR com alta qualidade
                processed_path = image_path.replace('.', '_processed.')
                img.save(processed_path, 'JPEG', quality=98, optimize=True)
                print(f"üíæ Imagem processada salva: {processed_path}")
                
                return processed_path
                
        except Exception as e:
            print(f"‚ùå Erro no pr√©-processamento: {str(e)}")
            return image_path  # Retorna original se houver erro
        
    def analyze_mammography(self, image_path: str) -> Dict[str, Any]:
        """
        Analisa imagem de mamografia usando Google Gemini Vision
        
        Args:
            image_path: Caminho para a imagem
            
        Returns:
            Dict com resultado da an√°lise
        """
        if not self.gemini_api_key:
            return {
                "success": False,
                "error": "Chave da API Gemini n√£o configurada",
                "analysis": None
            }
        
        try:
            import google.generativeai as genai
            
            # Configurar a API
            genai.configure(api_key=self.gemini_api_key)
            
            # Configurar o modelo
            model = genai.GenerativeModel('gemini-2.0-flash')
            
            # Pr√©-processar imagem para melhor an√°lise
            processed_image_path = self.preprocess_image(image_path)
            
            # Prompt otimizado para detec√ß√£o de c√¢ncer de mama em est√°gios iniciais
            prompt = """
            Analise esta imagem de mamografia com foco na detec√ß√£o precoce de altera√ß√µes que podem indicar c√¢ncer de mama em est√°gios iniciais. Forne√ßa uma an√°lise t√©cnica detalhada em portugu√™s brasileiro, formatada em Markdown.

            # ESTRUTURA DA AN√ÅLISE (use exatamente este formato):

            ## 1. QUALIDADE T√âCNICA DA IMAGEM
            Avalie cada aspecto com n√≠vel de confian√ßa (Alta/M√©dia/Baixa):
            - **Resolu√ß√£o e Nitidez**: [Descrever qualidade] - Confian√ßa: [Alta/M√©dia/Baixa]
            - **Contraste e Brilho**: [Adequado para visualiza√ß√£o de densidades?]
            - **Artefatos**: [Presentes/Ausentes - descrever se houver]
            - **Qualidade da Exposi√ß√£o**: [Avalia√ß√£o da penetra√ß√£o dos raios-X]

            ## 2. ANATOMIA E POSICIONAMENTO
            - **Estruturas Identific√°veis**: [Listar tecido glandular, gordura, pele, etc.]
            - **Posicionamento**: [Adequado/Inadequado - justificar]
            - **Cobertura**: [Completa/Parcial do tecido mam√°rio]
            - **Simetria**: [Se aplic√°vel]

            ## 3. DENSIDADE E PADR√ÉO DO TECIDO
            - **Classifica√ß√£o BI-RADS de Densidade**: [A/B/C/D]
              - A: Predominantemente gorduroso
              - B: Densidades fibroglandulares esparsas
              - C: Heterogeneamente denso
              - D: Extremamente denso
            - **Distribui√ß√£o**: [Homog√™nea/Heterog√™nea]
            - **Padr√µes Anormais**: [Descrever √°reas espec√≠ficas]

            ## 4. ACHADOS PRIORIT√ÅRIOS (‚ö†Ô∏è CR√çTICO)
            
            ### üî¥ ACHADOS CR√çTICOS (requerem aten√ß√£o imediata):
            [Liste aqui APENAS achados altamente suspeitos]
            - [Achado 1]: Localiza√ß√£o, caracter√≠sticas, n√≠vel de suspeita
            
            ### üü° ACHADOS IMPORTANTES (requerem investiga√ß√£o):
            [Liste achados que merecem aten√ß√£o mas n√£o s√£o imediatamente cr√≠ticos]
            - [Achado 1]: Descri√ß√£o detalhada
            
            ### üü¢ OBSERVA√á√ïES GERAIS:
            [Liste caracter√≠sticas normais ou achados benignos]

            ## 5. CARACTER√çSTICAS ESPEC√çFICAS DETECTADAS

            ### Microcalcifica√ß√µes
            - **Presen√ßa**: [Sim/N√£o]
            - **Padr√£o**: [Agrupadas/Lineares/Segmentais/Difusas]
            - **Localiza√ß√£o**: [Especificar quadrante/regi√£o]
            - **Morfologia**: [Pontiformes/Pleom√≥rficas/Lineares]
            - **Suspeita**: [Alta/M√©dia/Baixa]

            ### Massas/N√≥dulos
            - **Presen√ßa**: [Sim/N√£o]
            - **Localiza√ß√£o**: [Especificar]
            - **Dimens√µes**: [Estimativa em mm se poss√≠vel]
            - **Bordas**: [Circunscritas/Irregulares/Espiculadas/Microlobuladas]
            - **Densidade**: [Alta/Igual/Baixa em rela√ß√£o ao tecido]
            - **Suspeita**: [Alta/M√©dia/Baixa]

            ### Distor√ß√µes Arquiteturais
            - **Presen√ßa**: [Sim/N√£o]
            - **Localiza√ß√£o**: [Especificar]
            - **Descri√ß√£o**: [Detalhes do padr√£o alterado]

            ### Assimetrias
            - **Presen√ßa**: [Sim/N√£o]
            - **Tipo**: [Global/Focal/Em desenvolvimento]
            - **Localiza√ß√£o**: [Especificar]

            ## 6. CLASSIFICA√á√ÉO BI-RADS SUGERIDA
            **Categoria**: [0/1/2/3/4/5/6]
            - 0: Avalia√ß√£o adicional necess√°ria
            - 1: Negativo
            - 2: Achado benigno
            - 3: Provavelmente benigno
            - 4: Anormalidade suspeita
            - 5: Altamente sugestivo de malignidade
            - 6: Malignidade comprovada por bi√≥psia

            **Justificativa**: [Explicar categoria escolhida]

            ## 7. RECOMENDA√á√ïES
            - [ ] **Imediatas**: [A√ß√µes urgentes se categoria BI-RADS ‚â• 4]
            - [ ] **Curto Prazo**: [Seguimento ou exames complementares]
            - [ ] **Rotina**: [Seguimento normal se categoria BI-RADS ‚â§ 2]

            ## 8. LIMITA√á√ïES DA AN√ÅLISE
            - [Listar fatores que podem afetar a interpreta√ß√£o]
            - [√Åreas de visibilidade limitada]
            - [Necessidade de imagens adicionais/complementares]

            ## 9. RESUMO EXECUTIVO
            **Achados Principais**: [Resumo em 2-3 frases dos achados mais relevantes]
            **N√≠vel de Urg√™ncia**: [Baixo/Moderado/Alto/Cr√≠tico]
            **Pr√≥ximo Passo Recomendado**: [A√ß√£o espec√≠fica]

            ---

            ## ‚ö†Ô∏è AVISO M√âDICO-LEGAL
            Esta an√°lise √© uma ferramenta de **triagem computacional** e **N√ÉO substitui** a avalia√ß√£o de um radiologista especializado em mastologia. Todos os achados devem ser interpretados por profissional m√©dico qualificado. Em caso de d√∫vida, sempre optar por investiga√ß√£o adicional.

            ---

            **INSTRU√á√ïES IMPORTANTES**:
            - Use SEMPRE formato Markdown com cabe√ßalhos ##
            - Seja espec√≠fico em localiza√ß√µes (quadrante, hor√°rio do rel√≥gio)
            - Atribua n√≠veis de confian√ßa e suspeita quando relevante
            - Priorize achados por criticidade (üî¥üü°üü¢)
            - Forne√ßa medidas estimadas quando poss√≠vel
            - Use terminologia BI-RADS quando aplic√°vel
            - N√ÉO forne√ßa diagn√≥stico definitivo
            - SEMPRE inclua limita√ß√µes e recomenda√ß√µes
            """
            
            # Carregar e processar a imagem otimizada
            with open(processed_image_path, 'rb') as image_file:
                image_data = image_file.read()
            
            # Fazer a an√°lise
            response = model.generate_content([prompt, {"mime_type": "image/jpeg", "data": image_data}])
            
            # Limpar arquivo tempor√°rio
            try:
                if processed_image_path != image_path:
                    os.remove(processed_image_path)
            except:
                pass
            
            return {
                "success": True,
                "analysis": response.text,
                "model": "Gemini 1.5 Flash",
                "error": None
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Erro na an√°lise com Gemini: {str(e)}",
                "analysis": None
            }
    
    def analyze_with_alternative_api(self, image_path: str) -> Dict[str, Any]:
        """
        Analisa imagem usando Hugging Face com modelos espec√≠ficos para imagens m√©dicas
        
        Args:
            image_path: Caminho para a imagem
            
        Returns:
            Dict com resultado da an√°lise
        """
        if not self.hf_api_key:
            return {
                "success": False,
                "error": "Chave da API Hugging Face n√£o configurada",
                "analysis": None
            }
        
        try:
            # Pr√©-processar imagem para melhor an√°lise
            processed_image_path = self.preprocess_image(image_path)
            
            # Modelos dispon√≠veis e testados (ordenados por confian√ßa)
            models_to_try = [
                # FASE 1: Modelos com melhor performance (testados)
                "facebook/convnext-base-224",  # ConvNeXt - Melhor confian√ßa (15.1%)
                "microsoft/swin-base-patch4-window7-224",  # Swin Transformer - Boa confian√ßa (8.0%)
                
                # FASE 2: Modelos alternativos
                "microsoft/resnet-50",  # ResNet-50 - Confian√ßa moderada (5.0%)
                "google/vit-base-patch16-224",  # Vision Transformer - Confian√ßa baixa (2.7%)
                
                # NOTA: Modelos m√©dicos espec√≠ficos n√£o est√£o dispon√≠veis na API
                # Usamos modelos gerais com interpreta√ß√£o m√©dica + an√°lise local
            ]
            
            for model in models_to_try:
                try:
                    print(f"üîÑ Tentando an√°lise com modelo: {model}")
                    
                    # Preparar imagem para o modelo
                    with open(processed_image_path, 'rb') as image_file:
                        image_data = image_file.read()
                    
                    # Converter para base64 se necess√°rio
                    image_base64 = base64.b64encode(image_data).decode('utf-8')
                    
                    headers = {
                        "Authorization": f"Bearer {self.hf_api_key}",
                        "Content-Type": "application/json"
                    }
                    
                    payload = {
                        "inputs": image_base64,
                        "parameters": {
                            "top_k": 5
                        }
                    }
                    
                    response = requests.post(
                        f"https://api-inference.huggingface.co/models/{model}",
                        headers=headers,
                        json=payload,
                        timeout=120
                    )
                    
                    if response.status_code == 200:
                        result = response.json()
                        
                        # Processar resultado para an√°lise m√©dica
                        analysis_text = self._format_huggingface_analysis(result, model, processed_image_path)
                        
                        # Limpar arquivo tempor√°rio
                        try:
                            if processed_image_path != image_path:
                                os.remove(processed_image_path)
                        except:
                            pass
                        
                        return {
                            "success": True,
                            "analysis": analysis_text,
                            "model": f"Hugging Face - {model}",
                            "error": None
                        }
                    else:
                        print(f"‚ùå Erro HTTP {response.status_code} com {model}: {response.text}")
                        
                except Exception as e:
                    print(f"‚ùå Erro com modelo {model}: {str(e)}")
                    # Se for timeout, tentar pr√≥ximo modelo
                    if "timeout" in str(e).lower() or "timed out" in str(e).lower():
                        print(f"‚è∞ Timeout com {model}, tentando pr√≥ximo modelo...")
                    continue
            
            # Limpar arquivo tempor√°rio se n√£o foi limpo antes
            try:
                if processed_image_path != image_path:
                    os.remove(processed_image_path)
            except:
                pass
            
            # Se todos os modelos falharam, retornar an√°lise local
            return {
                "success": True,
                "analysis": self._generate_local_analysis(image_path),
                "model": "An√°lise Local - OpenCV",
                "error": None
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Erro na an√°lise com Hugging Face: {str(e)}",
                "analysis": None
            }
    
    def _format_huggingface_analysis(self, result: list, model: str, image_path: str = None) -> str:
        """Formata resultado do Hugging Face para an√°lise m√©dica com interpreta√ß√£o contextual"""
        try:
            if isinstance(result, list) and len(result) > 0:
                # Extrair caracter√≠sticas mais relevantes
                top_predictions = result[:5]  # Top 5 predi√ß√µes
                
                # Mapear termos gerais para contexto m√©dico quando poss√≠vel
                medical_interpretations = self._interpret_for_medical_context(top_predictions)
                
                analysis = f"""
## AN√ÅLISE COMPUTACIONAL DE IMAGEM
**Modelo:** {model} - Classifica√ß√£o de Padr√µes Visuais

### ‚ö†Ô∏è LIMITA√á√ïES IMPORTANTES:
- Este modelo foi treinado em **imagens gerais** (objetos, animais, etc.)
- **N√ÉO √© espec√≠fico para imagens m√©dicas** ou mamografias
- As classifica√ß√µes s√£o interpretadas no contexto m√©dico por mapeamento
- **Confian√ßa limitada** para an√°lise m√©dica real

### üìä CARACTER√çSTICAS DETECTADAS (Interpreta√ß√£o M√©dica):

"""
                for i, pred in enumerate(top_predictions, 1):
                    if isinstance(pred, dict) and 'label' in pred and 'score' in pred:
                        label = pred['label']
                        score = pred['score']
                        confidence = score * 100
                        
                        # Interpretar contexto m√©dico quando poss√≠vel
                        medical_note = medical_interpretations.get(label, "")
                        note_text = f" ({medical_note})" if medical_note else ""
                        
                        analysis += f"{i}. **{label}** (Confian√ßa: {confidence:.1f}%){note_text}\n"
                
                # Calcular confian√ßa m√©dia
                avg_confidence = sum(pred.get('score', 0) * 100 for pred in top_predictions if isinstance(pred, dict)) / len(top_predictions)
                
                analysis += f"""

### üîç INTERPRETA√á√ÉO PARA MAMOGRAFIA:
- **Modelo utilizado**: {model}
- **Confian√ßa m√©dia**: {avg_confidence:.1f}% (limitada para contexto m√©dico)
- **Tipo de an√°lise**: Classifica√ß√£o de padr√µes visuais gerais
- **Mapeamento**: Interpreta√ß√£o manual para terminologia m√©dica

### üìã MAPEAMENTO DE PADR√ïES:
As classifica√ß√µes de objetos foram interpretadas no contexto de mamografia:
- **Estruturas circulares** ‚Üí Poss√≠veis n√≥dulos ou les√µes
- **Estruturas lineares** ‚Üí Poss√≠veis ductos ou vasos
- **√Åreas de densidade** ‚Üí Varia√ß√µes do tecido mam√°rio
- **Padr√µes de textura** ‚Üí Caracter√≠sticas do tecido fibroglandular

### ‚ö†Ô∏è LIMITA√á√ïES CR√çTICAS:
- **N√£o √© diagn√≥stico m√©dico** - apenas classifica√ß√£o computacional
- **Modelo n√£o treinado** em imagens m√©dicas
- **Interpreta√ß√£o limitada** - mapeamento manual de conceitos gerais
- **Confian√ßa baixa** para an√°lise m√©dica real
- **Recomenda-se an√°lise complementar** com IA especializada (Gemini)

### üí° RECOMENDA√á√ÉO:
Esta an√°lise serve como **complemento t√©cnico** apenas. Para an√°lise m√©dica real, 
use o modelo Gemini especializado ou consulte um radiologista qualificado.
"""

                # Se confian√ßa baixa, adicionar an√°lise local
                if avg_confidence < 10.0 and image_path:
                    analysis += f"""

---

## üìä AN√ÅLISE T√âCNICA COMPLEMENTAR
*Devido √† baixa confian√ßa do modelo computacional ({avg_confidence:.1f}%), incluindo an√°lise local mais relevante:*

{self._generate_local_analysis(image_path)}
"""
                
                return analysis
            else:
                return self._generate_local_analysis(image_path)
                
        except Exception as e:
            print(f"Erro ao formatar an√°lise: {str(e)}")
            return self._generate_local_analysis(image_path)
    
    def _interpret_for_medical_context(self, predictions: list) -> dict:
        """Interpreta classifica√ß√µes no contexto m√©dico espec√≠fico para mamografia"""
        medical_mappings = {
            # Termos m√©dicos diretos
            "breast": "Tecido mam√°rio",
            "mammary": "Tecido mam√°rio",
            "chest": "Regi√£o tor√°cica",
            "thorax": "Cavidade tor√°cica",
            "lung": "Pulm√£o",
            "rib": "Costela",
            "bone": "Estrutura √≥ssea",
            "tissue": "Tecido biol√≥gico",
            "organ": "Estrutura org√¢nica",
            
            # Padr√µes espec√≠ficos de mamografia
            "mass": "Massa ou n√≥dulo",
            "lesion": "Les√£o",
            "nodule": "N√≥dulo",
            "cyst": "Cisto",
            "calcification": "Calcifica√ß√£o",
            "density": "Densidade mam√°ria",
            "fibroglandular": "Tecido fibroglandular",
            "fatty": "Tecido adiposo",
            "duct": "Ducto mam√°rio",
            
            # Estruturas que podem ser interpretadas como objetos
            "shovel": "Estrutura densa ou calcifica√ß√£o pontual",
            "ladle": "Estrutura c√¥ncava ou cavidade",
            "paddle": "Estrutura alongada (poss√≠vel ducto ou vaso)",
            "spoon": "Estrutura c√¥ncava ou depress√£o",
            "bowl": "Cavidade ou estrutura circular",
            "disk": "Estrutura circular ou les√£o bem definida",
            "circle": "Estrutura circular ou n√≥dulo",
            "oval": "Estrutura ovalada ou massa",
            "round": "Estrutura circular ou n√≥dulo",
            "ball": "Estrutura esf√©rica ou massa",
            "sphere": "Estrutura esf√©rica ou n√≥dulo",
            
            # Estruturas alongadas/lineares
            "nematode": "Estrutura alongada ou linear (poss√≠vel ducto)",
            "worm": "Estrutura alongada ou linear",
            "snake": "Estrutura alongada ou curvil√≠nea",
            "rope": "Estrutura linear ou ducto",
            "string": "Estrutura linear fina",
            "line": "Estrutura linear",
            "strip": "Estrutura linear",
            
            # Estruturas espirais/circulares
            "nautilus": "Padr√£o espiral ou circular",
            "conch": "Estrutura c√¥ncava ou padr√£o",
            "shell": "Estrutura c√¥ncava ou calcifica√ß√£o",
            "spiral": "Padr√£o espiral",
            "coil": "Padr√£o circular ou espiral",
            
            # Padr√µes de textura
            "texture": "Padr√£o de textura do tecido",
            "pattern": "Padr√£o visual identificado",
            "grain": "Textura granular",
            "mesh": "Padr√£o em rede ou textura",
            "net": "Padr√£o em rede",
            
            # Caracter√≠sticas de densidade
            "shadow": "√Årea de maior densidade ou sombra",
            "light": "√Årea de menor densidade",
            "dark": "√Årea de maior densidade",
            "bright": "√Årea hipodensa",
            "dense": "√Årea de alta densidade",
            
            # Caracter√≠sticas de contraste
            "contrast": "Contraste de imagem",
            "edge": "Borda ou margem",
            "border": "Borda ou margem",
            "outline": "Contorno ou margem",
            
            # Estruturas anat√¥micas espec√≠ficas
            "nipple": "Mamilo",
            "areola": "Ar√©ola",
            "axilla": "Axila",
            "pectoral": "M√∫sculo peitoral",
            "skin": "Pele ou tecido superficial"
        }
        
        interpretations = {}
        for pred in predictions:
            if isinstance(pred, dict) and 'label' in pred:
                label = pred['label'].lower()
                # Buscar correspond√™ncia exata primeiro, depois parcial
                if label in medical_mappings:
                    interpretations[pred['label']] = medical_mappings[label]
                else:
                    # Buscar correspond√™ncia parcial
                    for key, value in medical_mappings.items():
                        if key in label:
                            interpretations[pred['label']] = value
                            break
        
        return interpretations
    
    def _generate_local_analysis(self, image_path: str = None) -> str:
        """Gera an√°lise local robusta usando OpenCV quando APIs falham"""
        if not image_path:
            return self._generate_fallback_analysis()
        
        try:
            # Carregar imagem com OpenCV
            img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
            if img is None:
                return self._generate_fallback_analysis()
            
            # An√°lise de densidade
            mean_density = np.mean(img)
            std_density = np.std(img)
            min_density = np.min(img)
            max_density = np.max(img)
            contrast = max_density - min_density
            
            # An√°lise de qualidade
            laplacian_var = cv2.Laplacian(img, cv2.CV_64F).var()
            
            # Detec√ß√£o de regi√µes densas
            threshold = mean_density + (2 * std_density)
            dense_regions = np.sum(img > threshold)
            dense_percentage = (dense_regions / img.size) * 100
            
            # An√°lise de bordas
            edges = cv2.Canny(img, 50, 150)
            edge_density = np.sum(edges > 0) / img.size * 100
            
            # An√°lise de histograma
            hist = cv2.calcHist([img], [0], None, [256], [0, 256])
            peak_intensity = np.argmax(hist)
            
            # Avalia√ß√£o de qualidade
            quality_score = self._calculate_image_quality(img)
            
            # Classifica√ß√£o de densidade (simplificada)
            if mean_density < 85:
                density_category = "Baixa densidade (predominantemente adiposo)"
            elif mean_density < 128:
                density_category = "Densidade moderada (mista)"
            elif mean_density < 170:
                density_category = "Alta densidade (predominantemente fibroglandular)"
            else:
                density_category = "Muito alta densidade (extremamente denso)"
            
            return f"""
## AN√ÅLISE T√âCNICA LOCAL
**M√©todo:** Processamento de Imagem com OpenCV

### üìä ESTAT√çSTICAS DA IMAGEM:
- **Resolu√ß√£o**: {img.shape[1]} x {img.shape[0]} pixels
- **Densidade m√©dia**: {mean_density:.1f} (escala 0-255)
- **Desvio padr√£o**: {std_density:.1f}
- **Contraste**: {contrast:.1f}
- **Faixa de densidade**: {min_density:.1f} - {max_density:.1f}

### üéØ AN√ÅLISE DE DENSIDADE:
- **Categoria de densidade**: {density_category}
- **Regi√µes densas detectadas**: {dense_percentage:.1f}% da imagem
- **Intensidade predominante**: {peak_intensity} (pico do histograma)

### üîç QUALIDADE T√âCNICA:
- **Nitidez (Laplacian)**: {laplacian_var:.1f}
- **Densidade de bordas**: {edge_density:.2f}%
- **Score de qualidade**: {quality_score:.1f}/100
- **Adequa√ß√£o para an√°lise**: {'‚úÖ Adequada' if quality_score > 60 else '‚ö†Ô∏è Limitada'}

### üìà CARACTER√çSTICAS DETECTADAS:

#### Regi√µes de Alta Densidade:
- **Localiza√ß√£o**: Detectadas {dense_percentage:.1f}% de pixels acima do threshold
- **Caracter√≠sticas**: Poss√≠veis calcifica√ß√µes ou massas
- **Distribui√ß√£o**: {'Homog√™nea' if std_density < 30 else 'Heterog√™nea'}

#### Padr√µes de Contraste:
- **Contraste geral**: {'Adequado' if contrast > 100 else 'Baixo'}
- **Varia√ß√£o de densidade**: {'Alta' if std_density > 40 else 'Moderada'}
- **Qualidade de bordas**: {'Bem definidas' if edge_density > 5 else 'Pouco definidas'}

### üî¨ INTERPRETA√á√ÉO T√âCNICA:

#### Aspectos Positivos:
- ‚úÖ Imagem processada com sucesso
- ‚úÖ Resolu√ß√£o adequada para an√°lise t√©cnica
- ‚úÖ Contraste {'adequado' if contrast > 80 else 'limitado'}
- ‚úÖ Nitidez {'boa' if laplacian_var > 100 else 'regular'}

#### Limita√ß√µes Identificadas:
- {'‚ö†Ô∏è Contraste baixo pode limitar visualiza√ß√£o de detalhes' if contrast < 80 else ''}
- {'‚ö†Ô∏è Alta densidade pode mascarar les√µes sutis' if mean_density > 150 else ''}
- {'‚ö†Ô∏è Baixa nitidez pode afetar detec√ß√£o de microcalcifica√ß√µes' if laplacian_var < 100 else ''}

### üìã RECOMENDA√á√ïES T√âCNICAS:
1. **Para an√°lise m√©dica**: Consulte radiologista especializado
2. **Para pesquisa**: Imagem adequada para processamento computacional
3. **Limita√ß√µes**: An√°lise baseada apenas em caracter√≠sticas t√©cnicas
4. **Complemento**: Recomenda-se an√°lise com IA especializada (Gemini)

### ‚ö†Ô∏è AVISO IMPORTANTE:
Esta √© uma **an√°lise t√©cnica automatizada** baseada em processamento de imagem. 
**N√ÉO constitui diagn√≥stico m√©dico** e deve ser interpretada por profissional qualificado.

**M√©todos utilizados:**
- An√°lise estat√≠stica de densidade
- Detec√ß√£o de bordas (Canny)
- Medi√ß√£o de nitidez (Laplacian)
- Classifica√ß√£o de padr√µes de densidade
- Avalia√ß√£o de qualidade de imagem
"""
            
        except Exception as e:
            print(f"Erro na an√°lise local: {str(e)}")
            return self._generate_fallback_analysis()
    
    def _calculate_image_quality(self, img: np.ndarray) -> float:
        """Calcula score de qualidade da imagem (0-100)"""
        try:
            # Fatores de qualidade
            factors = []
            
            # 1. Contraste (0-30 pontos)
            contrast = np.max(img) - np.min(img)
            contrast_score = min(30, (contrast / 255) * 30)
            factors.append(contrast_score)
            
            # 2. Nitidez (0-25 pontos)
            laplacian_var = cv2.Laplacian(img, cv2.CV_64F).var()
            sharpness_score = min(25, (laplacian_var / 500) * 25)
            factors.append(sharpness_score)
            
            # 3. Distribui√ß√£o de histograma (0-20 pontos)
            hist = cv2.calcHist([img], [0], None, [256], [0, 256])
            hist_std = np.std(hist)
            hist_score = min(20, (hist_std / 1000) * 20)
            factors.append(hist_score)
            
            # 4. Resolu√ß√£o adequada (0-15 pontos)
            height, width = img.shape
            resolution_score = min(15, ((height * width) / (512 * 512)) * 15)
            factors.append(resolution_score)
            
            # 5. Aus√™ncia de artefatos (0-10 pontos)
            # Detectar poss√≠veis artefatos por varia√ß√£o extrema
            img_std = np.std(img)
            artifact_score = 10 if img_std < 80 else max(0, 10 - (img_std - 80) / 10)
            factors.append(artifact_score)
            
            return sum(factors)
            
        except:
            return 50.0  # Score neutro em caso de erro
    
    def _generate_fallback_analysis(self) -> str:
        """An√°lise de fallback quando n√£o √© poss√≠vel processar a imagem"""
        return """
## AN√ÅLISE T√âCNICA LOCAL
**M√©todo:** Sistema de Fallback

### ‚ö†Ô∏è LIMITA√á√ïES:
- Imagem n√£o p√¥de ser processada completamente
- An√°lise baseada em valida√ß√£o b√°sica
- Caracter√≠sticas t√©cnicas limitadas

### ‚úÖ PROCESSAMENTO REALIZADO:
- Valida√ß√£o de formato de arquivo
- Carregamento b√°sico da imagem
- Verifica√ß√£o de integridade

### üìã OBSERVA√á√ïES:
- Imagem carregada pelo sistema
- Formato compat√≠vel com an√°lise m√©dica
- Pronta para processamento manual por especialista

### üîÑ RECOMENDA√á√ïES:
1. Verificar qualidade do arquivo original
2. Tentar an√°lise com diferentes APIs
3. Consultar radiologista para avalia√ß√£o manual

### ‚ö†Ô∏è IMPORTANTE:
Esta √© uma an√°lise t√©cnica b√°sica. Para diagn√≥stico m√©dico, consulte um radiologista qualificado.
"""
    
    def analyze_with_cohere(self, image_path: str) -> Dict[str, Any]:
        """An√°lise com Cohere (API gratuita)"""
        if not self.cohere_api_key:
            return {
                "success": False,
                "error": "Chave da API Cohere n√£o configurada",
                "analysis": None,
                "api": "cohere"
            }
        
        try:
            # Pr√©-processar imagem
            processed_image_path = self.preprocess_image(image_path)
            
            # Converter imagem para base64
            with open(processed_image_path, 'rb') as image_file:
                image_data = image_file.read()
            
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            headers = {
                "Authorization": f"Bearer {self.cohere_api_key}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "model": "command",
                "message": """
                Analise esta imagem de mamografia e forne√ßa uma an√°lise t√©cnica detalhada em portugu√™s brasileiro.

                ESTRUTURA DA AN√ÅLISE:
                1. Qualidade t√©cnica da imagem
                2. Anatomia vis√≠vel
                3. Caracter√≠sticas do tecido mam√°rio
                4. Aspectos t√©cnicos
                5. Observa√ß√µes gerais

                IMPORTANTE: Esta √© uma an√°lise t√©cnica, n√£o um diagn√≥stico m√©dico.
                """,
                "image": image_base64,
                "max_tokens": 1000
            }
            
            response = requests.post(
                "https://api.cohere.ai/v1/chat",
                headers=headers,
                json=payload,
                timeout=60
            )
            
            # Limpar arquivo tempor√°rio
            try:
                if processed_image_path != image_path:
                    os.remove(processed_image_path)
            except:
                pass
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "success": True,
                    "analysis": result.get("text", "An√°lise n√£o dispon√≠vel"),
                    "api": "cohere",
                    "model": "Cohere Command",
                    "error": None
                }
            else:
                return {
                    "success": False,
                    "error": f"Erro HTTP {response.status_code}: {response.text}",
                    "analysis": None,
                    "api": "cohere"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"Erro na an√°lise com Cohere: {str(e)}",
                "analysis": None,
                "api": "cohere"
            }
    
    def analyze_with_anthropic(self, image_path: str) -> Dict[str, Any]:
        """An√°lise com Anthropic Claude (API gratuita)"""
        if not self.anthropic_api_key:
            return {
                "success": False,
                "error": "Chave da API Anthropic n√£o configurada",
                "analysis": None,
                "api": "anthropic"
            }
        
        try:
            # Pr√©-processar imagem
            processed_image_path = self.preprocess_image(image_path)
            
            # Converter imagem para base64
            with open(processed_image_path, 'rb') as image_file:
                image_data = image_file.read()
            
            image_base64 = base64.b64encode(image_data).decode('utf-8')
            
            headers = {
                "x-api-key": self.anthropic_api_key,
                "Content-Type": "application/json",
                "anthropic-version": "2023-06-01"
            }
            
            payload = {
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 1000,
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": """
                                Analise esta imagem de mamografia e forne√ßa uma an√°lise t√©cnica detalhada em portugu√™s brasileiro.

                                ESTRUTURA:
                                1. Qualidade t√©cnica da imagem
                                2. Anatomia vis√≠vel
                                3. Caracter√≠sticas do tecido
                                4. Aspectos t√©cnicos
                                5. Observa√ß√µes gerais

                                IMPORTANTE: An√°lise t√©cnica, n√£o diagn√≥stico m√©dico.
                                """
                            },
                            {
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": "image/jpeg",
                                    "data": image_base64
                                }
                            }
                        ]
                    }
                ]
            }
            
            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers=headers,
                json=payload,
                timeout=60
            )
            
            # Limpar arquivo tempor√°rio
            try:
                if processed_image_path != image_path:
                    os.remove(processed_image_path)
            except:
                pass
            
            if response.status_code == 200:
                result = response.json()
                
                analysis_text = ""
                for content in result.get("content", []):
                    if content.get("type") == "text":
                        analysis_text += content.get("text", "")
                
                return {
                    "success": True,
                    "analysis": analysis_text,
                    "api": "anthropic",
                    "model": "Claude 3 Sonnet",
                    "error": None
                }
            else:
                return {
                    "success": False,
                    "error": f"Erro HTTP {response.status_code}: {response.text}",
                    "analysis": None,
                    "api": "anthropic"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": f"Erro na an√°lise com Anthropic: {str(e)}",
                "analysis": None,
                "api": "anthropic"
            }
