#!/bin/bash

# Script de inicializa√ß√£o r√°pida - Mamografia IA
# Univap - Projetos IV - 2025

set -e

echo "üè• Plataforma de An√°lise de Mamografias com IA"
echo "================================================"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Diret√≥rio raiz do projeto
PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
BACKEND_DIR="$PROJECT_DIR/Backend"
FRONTEND_DIR="$PROJECT_DIR/frontend"

# Verificar se est√° no diret√≥rio correto
if [ ! -d "$BACKEND_DIR" ] || [ ! -d "$FRONTEND_DIR" ]; then
    echo -e "${RED}‚ùå Erro: Diret√≥rios do projeto n√£o encontrados!${NC}"
    exit 1
fi

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar depend√™ncias
echo -e "${BLUE}üîç Verificando depend√™ncias...${NC}"

if ! command_exists python3; then
    echo -e "${RED}‚ùå Python 3 n√£o encontrado!${NC}"
    exit 1
fi

if ! command_exists npm; then
    echo -e "${RED}‚ùå Node.js/npm n√£o encontrado!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Depend√™ncias OK${NC}"
echo ""

# Verificar arquivo .env do backend
echo -e "${BLUE}üîß Verificando configura√ß√£o...${NC}"

if [ ! -f "$BACKEND_DIR/.env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado no Backend${NC}"
    if [ -f "$BACKEND_DIR/env.example" ]; then
        cp "$BACKEND_DIR/env.example" "$BACKEND_DIR/.env"
        echo -e "${GREEN}‚úÖ Arquivo .env criado a partir do env.example${NC}"
        echo -e "${RED}‚ö†Ô∏è  IMPORTANTE: Configure suas chaves de API em Backend/.env${NC}"
        echo -e "${YELLOW}   Edite o arquivo e adicione:${NC}"
        echo -e "${YELLOW}   - GEMINI_API_KEY=sua_chave_aqui${NC}"
        echo -e "${YELLOW}   - HUGGINGFACE_API_KEY=sua_chave_aqui${NC}"
        read -p "Pressione ENTER ap√≥s configurar as chaves de API..."
    fi
fi

# Verificar se as chaves est√£o configuradas
if grep -q "your_gemini_api_key_here" "$BACKEND_DIR/.env" 2>/dev/null; then
    echo -e "${RED}‚ö†Ô∏è  AVISO: Chaves de API n√£o configuradas!${NC}"
    echo -e "${YELLOW}   Edite Backend/.env e adicione suas chaves${NC}"
    read -p "Continuar mesmo assim? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo ""

# Verificar se precisa instalar depend√™ncias do backend
if [ ! -d "$BACKEND_DIR/venv" ]; then
    echo -e "${BLUE}üì¶ Criando ambiente virtual Python...${NC}"
    cd "$BACKEND_DIR"
    python3 -m venv venv
    echo -e "${GREEN}‚úÖ Ambiente virtual criado${NC}"
fi

# Ativar ambiente virtual e instalar depend√™ncias
echo -e "${BLUE}üì¶ Instalando depend√™ncias do Backend...${NC}"
cd "$BACKEND_DIR"
source venv/bin/activate

# Atualizar pip, setuptools e wheel
pip install -q --upgrade pip setuptools wheel

# Tentar instalar depend√™ncias
if ! pip install -q -r requirements.txt 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è  Problema na instala√ß√£o, recriando ambiente virtual...${NC}"
    deactivate
    rm -rf venv
    python3 -m venv venv
    source venv/bin/activate
    pip install -q --upgrade pip setuptools wheel
    pip install -r requirements.txt
fi

echo -e "${GREEN}‚úÖ Depend√™ncias do Backend instaladas${NC}"
echo ""

# Verificar se precisa instalar depend√™ncias do frontend
if [ ! -d "$FRONTEND_DIR/node_modules" ]; then
    echo -e "${BLUE}üì¶ Instalando depend√™ncias do Frontend...${NC}"
    cd "$FRONTEND_DIR"
    npm install --silent
    echo -e "${GREEN}‚úÖ Depend√™ncias do Frontend instaladas${NC}"
    echo ""
fi

# Verificar migra√ß√£o do banco de dados
if [ -f "$BACKEND_DIR/mamografia_analysis.db" ]; then
    echo -e "${BLUE}üîÑ Verificando migra√ß√£o do banco de dados...${NC}"
    cd "$BACKEND_DIR"
    python3 migrate_database.py status
    
    # Executar migra√ß√£o se necess√°rio
    if ! python3 migrate_database.py > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Executando migra√ß√£o autom√°tica...${NC}"
        python3 migrate_database.py
    fi
    echo ""
fi

# Perguntar qual modo de execu√ß√£o
echo -e "${BLUE}üöÄ Escolha o modo de execu√ß√£o:${NC}"
echo ""
echo "  1) Terminal √∫nico (Backend + Frontend em background)"
echo "  2) Terminais separados (recomendado para desenvolvimento)"
echo "  3) Apenas Backend"
echo "  4) Apenas Frontend"
echo ""
read -p "Escolha uma op√ß√£o (1-4): " exec_choice

case $exec_choice in
    1)
        echo -e "${BLUE}üöÄ Iniciando Backend e Frontend...${NC}"
        
        # Iniciar Backend em background
        cd "$BACKEND_DIR"
        source venv/bin/activate
        python3 app.py > /tmp/mamografia-backend.log 2>&1 &
        BACKEND_PID=$!
        
        # Aguardar backend iniciar
        sleep 3
        
        # Verificar se backend iniciou
        if ps -p $BACKEND_PID > /dev/null; then
            echo -e "${GREEN}‚úÖ Backend iniciado (PID: $BACKEND_PID)${NC}"
        else
            echo -e "${RED}‚ùå Erro ao iniciar Backend${NC}"
            cat /tmp/mamografia-backend.log
            exit 1
        fi
        
        # Iniciar Frontend em background
        cd "$FRONTEND_DIR"
        npm run dev > /tmp/mamografia-frontend.log 2>&1 &
        FRONTEND_PID=$!
        
        # Aguardar frontend iniciar
        sleep 5
        
        # Verificar se frontend iniciou
        if ps -p $FRONTEND_PID > /dev/null; then
            echo -e "${GREEN}‚úÖ Frontend iniciado (PID: $FRONTEND_PID)${NC}"
        else
            echo -e "${RED}‚ùå Erro ao iniciar Frontend${NC}"
            cat /tmp/mamografia-frontend.log
            kill $BACKEND_PID 2>/dev/null
            exit 1
        fi
        
        echo ""
        echo -e "${GREEN}üéâ Aplica√ß√£o iniciada com sucesso!${NC}"
        echo ""
        echo -e "${BLUE}üì± Acessos:${NC}"
        echo -e "   Frontend: ${GREEN}http://localhost:5173${NC}"
        echo -e "   API Docs: ${GREEN}http://localhost:8000/docs${NC}"
        echo -e "   Health:   ${GREEN}http://localhost:8000/health${NC}"
        echo ""
        echo -e "${YELLOW}üìã PIDs:${NC}"
        echo -e "   Backend:  $BACKEND_PID"
        echo -e "   Frontend: $FRONTEND_PID"
        echo ""
        echo -e "${BLUE}üìù Logs:${NC}"
        echo -e "   Backend:  tail -f /tmp/mamografia-backend.log"
        echo -e "   Frontend: tail -f /tmp/mamografia-frontend.log"
        echo ""
        echo -e "${RED}‚ö†Ô∏è  Para parar os servi√ßos:${NC}"
        echo -e "   kill $BACKEND_PID $FRONTEND_PID"
        echo -e "   ou execute: ${YELLOW}./stop.sh${NC}"
        echo ""
        
        # Criar script de parada
        cat > "$PROJECT_DIR/stop.sh" <<EOF
#!/bin/bash
echo "Parando servi√ßos..."
kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
echo "Servi√ßos parados!"
EOF
        chmod +x "$PROJECT_DIR/stop.sh"
        
        # Aguardar Ctrl+C
        echo "Pressione Ctrl+C para ver os logs em tempo real"
        sleep 2
        tail -f /tmp/mamografia-backend.log /tmp/mamografia-frontend.log
        ;;
        
    2)
        echo -e "${BLUE}üöÄ Prepare dois terminais:${NC}"
        echo ""
        echo -e "${GREEN}Terminal 1 - Backend:${NC}"
        echo "  cd $BACKEND_DIR"
        echo "  source venv/bin/activate"
        echo "  python3 app.py"
        echo ""
        echo -e "${GREEN}Terminal 2 - Frontend:${NC}"
        echo "  cd $FRONTEND_DIR"
        echo "  npm run dev"
        echo ""
        ;;
        
    3)
        echo -e "${BLUE}üöÄ Iniciando apenas Backend...${NC}"
        cd "$BACKEND_DIR"
        source venv/bin/activate
        python3 app.py
        ;;
        
    4)
        echo -e "${BLUE}üöÄ Iniciando apenas Frontend...${NC}"
        cd "$FRONTEND_DIR"
        npm run dev
        ;;
        
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida${NC}"
        exit 1
        ;;
esac

